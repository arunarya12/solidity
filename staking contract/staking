pragma solidity ^0.8.1;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract minibank is ERC20 {
    constructor() ERC20("rewardtoken", "RRT") {}

    struct _staking {
        uint256 amount;
        uint256 initialTimestamp;
    }
    mapping(address => _staking) public infor_record;

    function mint(address to, uint256 amount) external {
        _mint(to, amount);
    }

    function burn(address to, uint256 amount) external {
        _burn(to, amount);
    }

    function deposit(uint256 _amount) public {
        require(_amount > 0, "more than 0");
        require(msg.sender != address(0), "null address");
        infor_record[msg.sender].amount += _amount;
        infor_record[msg.sender].initialTimestamp = block.timestamp;
        IERC20(address(this)).transferFrom(msg.sender, address(this), _amount);
    }

    function withdrawal(uint256 _amount) public {
        require(
            block.timestamp >=
                infor_record[msg.sender].initialTimestamp + 100 seconds,
            " cannot unstake yet"
        );
        uint256 checkbalance = infor_record[msg.sender].amount;
        require(checkbalance >= _amount, "Insufficient token balance");
        infor_record[msg.sender].amount -= _amount;
        infor_record[msg.sender].initialTimestamp = block.timestamp;
        IERC20(address(this)).transfer(msg.sender, _amount);
    }
}
